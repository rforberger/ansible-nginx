# {{ ansible_managed }}
{% if item.target_servers is defined %}
upstream {{ item.name }}_target {
	{% for item in item.target_servers %}
        server {{ item.hostname }}:{{ item.port }};
	{% endfor %}
}

{% if item.listeners_http is defined %}
# HTTP Service
server {
        # rewrite to Https
        {% for l_http in item.listeners_http %}
        {% if l_http.ip is defined %}
        listen {{ l_http.ip }}:{{ l_http.port }} {% if item.is_default_server %}default_server{% endif %};
        {% endif %}
        {% if l_http.ip6 is defined %}
        listen [{{ l_http.ip6 }}]:{{ l_http.port }} {% if item.is_default_server %}default_server{% endif %};
        {% endif %}
        {% endfor %}
        server_name {{ item.name }}{% if item.custom_server_name_port == True %}:{{ item.listeners_http[0].port }}{% endif %};
        return 301 https://$server_name:{{ item.listeners_https[0].port }}$request_uri;
}
{% endif %}

# HTTPS Proxy
server {
    {% for l_https in item.listeners_https %}
    {% if l_https.ip is defined %}
    listen {{ l_https.ip }}:{{ l_https.port }} {% if item.is_default_server %}default_server{% endif %} ssl http2;
    {% endif %}
    {% if l_https.ip6 is defined %}
    listen [{{ l_https.ip6 }}]:{{ l_https.port }} {% if item.is_default_server %}default_server{% endif %} ssl http2;
    {% endif %}
    {% endfor %}
	server_name {{ item.name }}{% if item.custom_server_name_port == True %}:{{ item.listeners_https[0].port }}{% endif %};

	# minimum ssl stuff
	ssl_certificate             {{ item.certificate_name }};
    ssl_certificate_key         {{ item.key_name }};
	ssl_protocols			    {{ item.tls_protocols }};
    # SSL settings
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:le_nginx_SSL:10m;
    ssl_session_tickets off;
    ssl_session_timeout 1440m;

    # optional: see https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header                          strict-transport-security "max-age=31536000";
    {% if item.public_site == True %}
    add_header                          x-frame-options           "sameorigin";
    add_header                          x-xss-protection          "1; mode=block";
  	{% endif %}
    add_header                          x-content-type-options    "nosniff";
    {% if item.mod_security == 'On' %}
      proxy_cookie_path                 / "/; HTTPOnly; Secure";
	{% endif %}

    {% if item.mod_security == 'On' %}
      modsecurity on;
	{% endif %}

   	client_max_body_size                {{ item.client_max_body_size }};

    {% if item.request_client_certificate == 'On' %}
       ssl_verify_client on;
       ssl_client_certificate /etc/nginx/ssl/{{ item.client_certificate }};
	{% endif %}

    location / {
       {% if item.mod_security == 'On' %}
          modsecurity_rules_file /etc/nginx/modsec/modsec_include.load;
	   {% endif %}
		
	   {% for item2 in item.target_servers %}
          proxy_pass {{ item2.protocol }}://{{ item.name }}_target;
	   {% endfor %}
       proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
       proxy_redirect off;
       proxy_buffering off;
       proxy_set_header        Host            $host;
       proxy_set_header        X-Real-IP       $remote_addr;
       proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header        X-Forwarded-Proto "$scheme";
       proxy_set_header        X-Forwarded-Ssl "on";
       proxy_hide_header       Upgrade;
       proxy_connect_timeout       600;
       proxy_send_timeout          600;
       proxy_read_timeout          600;
       send_timeout                600;
       {% if item.public_site == False %}
       proxy_hide_header	x-frame-options;
       proxy_hide_header	Content-Security-Policy;
       {% endif %}
       {% if item.additional_directives is defined %}
       {% for directive in item.additional_directives %}
       {{ directive }};
       {% endfor %}
       {% endif %}
    }


}
{% else %}
{% if item.listeners_http is defined %}
# HTTP Service
server {
        # rewrite to Https
        {% for l_http in item.listeners_http %}
        {% if l_http.ip is defined %}
        listen {{ l_http.ip }}:{{ l_http.port }} {% if item.is_default_server %}default_server{% endif %};
        {% endif %}
        {% if l_http.ip6 is defined %}
        listen [{{ l_http.ip6 }}]:{{ l_http.port }} {% if item.is_default_server %}default_server{% endif %};
        {% endif %}
        {% endfor %}
        server_name {{ item.name }}{% if item.custom_server_name_port == True %}:{{ item.listeners_http[0].port }}{% endif %};
        return 301 https://$server_name:{{ item.listeners_https[0].port }}$request_uri;
}
{% endif %}

# HTTPS Service
server {
    {% for l_https in item.listeners_https %}
    {% if l_https.ip is defined %}
    listen {{ l_https.ip }}:{{ l_https.port }} {% if item.is_default_server %}default_server{% endif %} ssl http2;
    {% endif %}
    {% if l_https.ip6 is defined %}
    listen [{{ l_https.ip6 }}]:{{ l_https.port }} {% if item.is_default_server %}default_server{% endif %} ssl http2;
    {% endif %}
    {% endfor %}
	server_name {{ item.name }}{% if item.custom_server_name_port == True %}:{{ item.listeners_https[0].port }}{% endif %};

    {% if item.document_root is defined %}
    root {{ item.document_root }};
    {% else %}
    root /var/www/vhosts/{{ item.name }};
    {% endif %}
    index index.html index.htm index.php;

	# minimum ssl stuff
	ssl_certificate             {{ item.certificate_name }};
    ssl_certificate_key         {{ item.key_name }};
	ssl_protocols			    {{ item.tls_protocols }};
    # SSL settings
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:le_nginx_SSL:10m;
    ssl_session_tickets off;
    ssl_session_timeout 1440m;

    # optional: see https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header                          strict-transport-security "max-age=31536000";
    {% if item.public_site == True %}
    add_header                          x-frame-options           "sameorigin";
    add_header                          x-xss-protection          "1; mode=block";
    {% endif %}
    add_header                          x-content-type-options    "nosniff";
    {% if item.mod_security == 'On' %}
      proxy_cookie_path                 / "/; HTTPOnly; Secure";
	{% endif %}

    {% if item.mod_security == 'On' %}
      modsecurity on;
	{% endif %}

   	client_max_body_size                {{ item.client_max_body_size }};

    {% if item.request_client_certificate == 'On' %}
       ssl_verify_client on;
       ssl_client_certificate /etc/nginx/ssl/{{ item.client_certificate }};
	{% endif %}

    location / {
       {% if item.mod_security == 'On' %}
          modsecurity_rules_file /etc/nginx/modsec/modsec_include.load;
	   {% endif %}
	   {% if item.mod_php == 'On' %}
	   try_files $uri $uri/ /index.php$is_args$args;
	   {% endif %}

	   {% if item.additional_directives is defined %}
       {% for directive in item.additional_directives %}
       {{ directive }};
       {% endfor %}
       {% endif %}
    }
    {% if item.mod_php == 'On' %}
    location ~ \.php$ {
      try_files $uri =404;
      include fastcgi_params;
      fastcgi_pass unix:/run/php/php8.2-fpm.sock;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }
    {% endif %}

}
{% endif %}